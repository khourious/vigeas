#!/bin/bash

usage () {
    echo "
vigeas-nanopore
--------
Viral genome assembly pipeline for WGS using <Oxford Nanopore Technologies>

List available primer scheme in this workflow:
    $(basename $0) -l

Basecalling + demultiplexing + assembly + summary stats:
    $(basename $0) -w 1 -i <input path> -s <sample sheet> -b <barcode kit> -t <threads>

Assembly:
    $(basename $0) -w 2 -i <input path> -s <sample sheet> -b <barcode kit> -t <threads>

Summary stats:
    $(basename $0) -w 3 -i <input path> -s <sample sheet> -t <threads>

Basecalling + demultiplexing:
    $(basename $0) -w 4 -i <input path> -b <barcode kit> -t <threads>

Command line parameters:
    -b arg    Space separated list of barcoding kit(s) or expansion kit(s) to detect against.
              List supported barcoding kits: guppy_barcoder --print_kits.
    -h        Print this help and exit.
    -i arg    Path containing the FAST5 raw data (-w 1, 2 or 4) or containing the assembly data (-w 3).
    -s arg    Path containing the samplesheet in csv with sample identification, barcode number and primer scheme.
    -t arg    Max number of threads (default: all cores minus 2).
    -u        Update conda (using micromamba) dependencies.
    -v        Display version information and check for update.
    -w arg    Set the workflow option.
                 1- basecalling + demultiplexing + assembly + summary stats
                 2- assembly
                 3- summary stats
                 4- basecalling + demultiplexing"
exit -1
}

primer_scheme_list () {
    echo "
vigeas-nanopore

--> Available primer schemes
----> updated: 27 May 2023

(#) vigeas-illumina depth coverage plot
(*) vigeras-nanopore depth coverage plot

---------------------------------------------------------------------------------------------------------
target                          primer_scheme       url_reference
---------------------------------------------------------------------------------------------------------
CHIKV Asian/ECSA [~400pb]       ChikAsianECSA_V1    https://github.com/zibraproject/zika-pipeline

DENV-1 [~400pb](#)              DENGUESEQ1_V1       https://dx.doi.org/10.17504/protocols.io.kqdg39xxeg25/v2
DENV-1 [~900pb](#)              DENV1_V1            https://doi.org/10.1038/s41467-021-22607-0

DENV-2 [~400pb](#)              DENGUESEQ2_V1       https://dx.doi.org/10.17504/protocols.io.kqdg39xxeg25/v2
DENV-2 [~900pb](#)              DENV2_V1            https://doi.org/10.1038/s41467-021-22607-0

DENV-3 [~400pb](#)              DENGUESEQ3_V1       https://dx.doi.org/10.17504/protocols.io.kqdg39xxeg25/v2
DENV-3 [~900pb](#)              DENV3_V1            https://doi.org/10.1038/s41467-021-22607-0

DENV-4 [~400pb](#)              DENGUESEQ4_V1       https://dx.doi.org/10.17504/protocols.io.kqdg39xxeg25/v2
DENV-4 [~700pb](#)              DENV4_V1            https://doi.org/10.1038/s41467-021-22607-0

EV [~1000pb]                    ZaireEbola_V1       https://github.com/artic-network/artic-ncov2019
EV [~500pb]                     ZaireEbola_V2       https://github.com/artic-network/artic-ncov2019
EV [~400pb]                     ZaireEbola_V3       https://github.com/artic-network/artic-ncov2019

HTLV-1 [400~pb](#)              HTLV1_V1            Fernanda Khouri Lab (UFBA-IMS)

LASV L-segment [~400pb]         LassaL_V1           https://github.com/zibraproject/zika-pipeline
LASV S-segment [~400pb]         LassaS_V1           https://github.com/zibraproject/zika-pipeline

MPXV [~2000pb]                  MPXV_V1             https://dx.doi.org/10.17504/protocols.io.5qpvob1nbl4o/v2

NiV  [~400pb]                   Nipah_V1            https://github.com/artic-network/artic-ncov2019

OROV L-segment [~400pb]         OROV400L_V1         https://github.com/zibraproject/zika-pipeline
OROV M-segment [~400pb]         OROV400M_V1         https://github.com/zibraproject/zika-pipeline
OROV S-segment [~400pb]         OROV400S_V1         https://github.com/zibraproject/zika-pipeline

SARS-CoV-2 [~400pb](#)          ARTIC_V1            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb](#)          ARTIC_V2            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb](#)          ARTIC_V3            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb](#)          ARTIC_V4            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb](#)          ARTIC_V4_1          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb](#)          ARTIC_V5_3_2        https://github.com/quick-lab/SARS-CoV-2
SARS-CoV-2 [~1200pb](#)         MIDNIGHT_V1         https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2 [~1200pb](#)         MIDNIGHT_V2         https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2 [~2000pb](#)         FIOCRUZ-IOC_V1      https://doi.org/10.1101/2020.04.30.069039
SARS-CoV-2 [~2000pb](#)         FIOCRUZ-IOC_V2      https://doi.org/10.1101/2020.04.30.069039

YFV [~500pb]                    YFV500_V1           https://github.com/zibraproject/zika-pipeline
YFV [~1000pb]                   YFV1000_V1          https://github.com/zibraproject/zika-pipeline

ZIKV Asian [~400pb](#)          ZikaAsian_V2        https://github.com/zibraproject/zika-pipeline
---------------------------------------------------------------------------------------------------------"
exit -1
}

update () {
    micromamba update -y -n vigeas_nanopore -c conda-forge -c bioconda --all
    micromamba update -y -n vigeas_sars2 -c conda-forge -c bioconda --all
    micromamba update -y -n vigeas_summary -c conda-forge -c bioconda --all
exit -1
}

version () {
    echo "
vigeas-nanopore

--> updated: 04 Sep 2023
----> Laise de Moraes [https://lpmor22.github.io/]
------> Khouri Lab, GonÃ§alo Moniz Institute, FIOCRUZ, Brazil
--------> Using ARTIC v.1.2.3 (https://github.com/artic-network/fieldbioinformatics)"
exit -1
}

while getopts "b:g:hi:ls:t:uvw:" OPT; do
    case "$OPT" in
        b) BARCODE_KIT="$OPTARG";;
        g) GPU_MEM="$OPTARG";;
        h) usage;;
        i) INPUT="$OPTARG";;
        l) primer_scheme_list;;
        s) SAMPLE_SHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
        u) update;;
        v) version;;
        w) WORKFLOW="$OPTARG";;
    esac
done

if [[ ! -z "$WORKFLOW" ]]; then
    if [[ "$WORKFLOW" == "1" ]]; then
        if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]] || [[ -z "$BARCODE_KIT" ]] || [[ -z "$GPU_MEM" ]]; then
            usage
        else
            LIBRARY_NAME="$(basename "$SAMPLE_SHEET" | awk -F. '{print $1}')"
            ANALYSIS_DIR=$HOME/vigeas/"$LIBRARY_NAME"_ANALYSIS
            [[ ! -d "$ANALYSIS_DIR" ]] && mkdir -p "$ANALYSIS_DIR" "$ANALYSIS_DIR"/ASSEMBLY && chmod 700 -R "$ANALYSIS_DIR"
            echo "" && echo "Output path: "$ANALYSIS_DIR""
            echo "" && echo "Log Analysis: "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
            echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        fi
    elif [[ "$WORKFLOW" == "2" ]]; then
        if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]] || [[ -z "$BARCODE_KIT" ]]; then
            usage
        else
            LIBRARY_NAME="$(basename "$SAMPLE_SHEET" | awk -F. '{print $1}')"
            ANALYSIS_DIR=$HOME/vigeas/"$LIBRARY_NAME"_ANALYSIS
            [[ ! -d "$ANALYSIS_DIR" ]] && mkdir -p "$ANALYSIS_DIR" "$ANALYSIS_DIR"/ASSEMBLY && chmod 700 -R "$ANALYSIS_DIR"
            echo "" && echo "Output path: "$ANALYSIS_DIR""
            echo "" && echo "Log Analysis: "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
            echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        fi
    elif [[ "$WORKFLOW" == "3" ]]; then
        if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]]; then
            usage
        else
            LIBRARY_NAME="$(basename "$SAMPLE_SHEET" | awk -F. '{print $1}')"
            ANALYSIS_DIR=$HOME/vigeas/"$LIBRARY_NAME"_ANALYSIS
            [[ ! -d "$ANALYSIS_DIR" ]] && mkdir -p "$ANALYSIS_DIR" && chmod 700 -R "$ANALYSIS_DIR"
            echo "" && echo "Output path: "$ANALYSIS_DIR""
            echo "" && echo "Log Analysis: "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
            echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        fi
    elif [[ "$WORKFLOW" == "4" ]]; then
        if [[ -z "$INPUT" ]] || [[ -z "$BARCODE_KIT" ]] || [[ -z "$GPU_MEM" ]]; then
            usage
        else
            LIBRARY_NAME="$(basename "$INPUT")"
            ANALYSIS_DIR=$HOME/vigeas/"$LIBRARY_NAME"_ANALYSIS
            [[ ! -d "$ANALYSIS_DIR" ]] && mkdir -p "$ANALYSIS_DIR" "$ANALYSIS_DIR"/CAT && chmod 700 -R "$ANALYSIS_DIR"
            echo "" && echo "Output path: "$ANALYSIS_DIR""
            echo "" && echo "Log Analysis: "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
            echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt"
        fi
    else
        usage
    fi
else
    usage
fi

bg() {
    start=$(date +%s.%N)
    if [[ -z "$THREADS" ]]; then
        THREADS=$(nproc | awk '{print $1-2}')
    fi
    if [[ ! -z "$WORKFLOW" ]]; then
        if [[ "$WORKFLOW" == "1" ]]; then
            if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]] || [[ -z "$BARCODE_KIT" ]] || [[ -z "$GPU_MEM" ]]; then
                usage
            else
                eval "$(micromamba shell hook --shell bash)"
                eval "$(micromamba shell hook --shell zsh)"
                export PATH=$HOME/ont-guppy/bin:$PATH
                for i in $(find "$INPUT" -type f -name '*.fast5'); do pod5 convert fast5 "$i" --output "$ANALYSIS_DIR"/POD5/$(echo "$i" | awk -F/ '{print $NF}').pod5; done
                dorado basecaller $HOME/ont-dorado/models/dna_r9.4.1_e8_fast@v3.4 "$ANALYSIS_DIR"/POD5/ -v --min-qscore 8 -r --emit-fastq > "$ANALYSIS_DIR"/BASECALL/"$LIBRARY_NAME"_BASECAL.fastq
                guppy_barcoder -r --disable_pings --trim_adapters --barcode_kits "$BARCODE_KIT" -i "$ANALYSIS_DIR"/BASECALL/ -s "$ANALYSIS_DIR"/DEMUX -t "$THREADS"
                micromamba activate vigeas_nanopore
                dos2unix "$SAMPLE_SHEET"
                for i in $(cat "$SAMPLE_SHEET"); do
                    SAMPLE_ID=$(echo "$i" | awk -F, '{print $1}')
                    BARCODE_ID=$(echo "$i"| awk -F, '{print $2}')
                    PRIMER_SCHEME=$(echo "$i" | awk -F, '{print $3}')
                    PRIMER_SCHEME_DIR=$(echo "$PRIMER_SCHEME" | sed -e 's/ARTIC_V1/ARTIC\/V1/g' -e 's/ARTIC_V2/ARTIC\/V2/g' -e 's/ARTIC_V3/ARTIC\/V3/g' -e 's/ARTIC_V4/ARTIC\/V4/g' -e 's/ARTIC_V4_1/ARTIC\/V4.1/g' -e 's/ChikAsianECSA_V1/ChikAsianECSA\/V1/g' -e 's/DENV1_V1/DENV1\/V1/g' -e 's/DENV2_V1/DENV2\/V1/g' -e 's/DENV3_V1/DENV3\/V1/g' -e 's/DENV4_V1/DENV4\/V1/g' -e 's/FIOCRUZ-IOC_V1/FIOCRUZ-IOC\/V1/g' -e 's/FIOCRUZ-IOC_V2/FIOCRUZ-IOC\/V2/g' -e 's/LassaL_V1/LassaL\/V1/g' -e 's/LassaS_V1/LassaS\/V1/g' -e 's/MIDNIGHT_V1/MIDNIGHT\/V1/g' -e 's/MIDNIGHT_V2/MIDNIGHT\/V2/g' -e 's/MPXV_V1/MPXV\/V1/g' -e 's/Nipah_V1/Nipah\/V1/g' -e 's/OROV400L_V1/OROV400L\/V1/g' -e 's/OROV400M_V1/OROV400M\/V1/g' -e 's/OROV400S_V1/OROV400S\/V1/g' -e 's/WNV400_V1/WNV400\/V1/g' -e 's/YFV500_V1/YFV500\/V1/g' -e 's/YFV1000_V1/YFV1000\/V1/g' -e 's/ZaireEbola_V1/ZaireEbola\/V1/g' -e 's/ZikaAsian_V1/ZikaAsian\/V1/g')
                    REF_SEQ=$(echo "$PRIMER_SCHEME_DIR" | awk -F/ '{print $1}')
                    echo "$PRIMER_SCHEME_DIR"
                    if [[ "$BARCODE_KIT" == "SQK-RBK110-96" ]]; then
                        if [[ "$REF_SEQ" == "MIDNIGHT" ]]; then
                            MIN=250
                            MAX=1500
                        fi
                    else
                        MIN=$(paste <(egrep "_RIGHT|_REVERSE|_REV|_RV|_R" $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".scheme.bed | grep -v alt | awk -F"\t" '{print $2}') <(egrep "_LEFT|_FORWARD|_FWD|_FW|_F" $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".scheme.bed | grep -v alt | awk -F"\t" '{print $3}') | awk -F"\t" '{print $1-$2}' | sort -n | sed -n '1p')
                        MAX=$(paste <(egrep "_RIGHT|_REVERSE|_REV|_RV|_R" $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".scheme.bed | grep -v alt | awk -F"\t" '{print $2}') <(egrep "_LEFT|_FORWARD|_FWD|_FW|_F" $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".scheme.bed | grep -v alt | awk -F"\t" '{print $3}') | awk -F"\t" '{print $1-$2+200}' | sort -n | sed -n '1p')
                    fi
                    cd "$ANALYSIS_DIR"/ASSEMBLY
                    mkdir "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"
                    if [ $(echo "$BARCODE_ID" | awk '{if ($0 ~ /-/) {print "yes"} else {print "no"}}') == "yes" ]; then
                        for i in $(echo "$BARCODE_ID" | sed 's/BC/barcode/g' | tr '-' '\n'); do
                            cat "$ANALYSIS_DIR"/DEMUX/"$i"/*.fastq > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$BARCODE_ID".fastq
                        done
                    else
                        for i in $(echo "$BARCODE_ID" | sed 's/BC/barcode/g'); do
                            cat "$ANALYSIS_DIR"/DEMUX/"$i"/*.fastq > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$BARCODE_ID".fastq
                        done
                    fi
                    artic guppyplex --skip-quality-check --min-length "$MIN" --max-length "$MAX" --directory "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID" --output "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".fastq
                    artic minion --medaka --medaka-model r941_min_high_g360 --normalise 0 --threads "$THREADS" --read-file "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".fastq --scheme-directory $HOME/vigeas/primer_schemes "$PRIMER_SCHEME_DIR" "$SAMPLE_ID"
                    bcftools consensus -f "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".preconsensus.fasta "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".pass.vcf.gz -m "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".coverage_mask.txt -o "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".consensus.fasta 2> "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".unmatch.txt
                    UNMATCH=$(grep "does not match" "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".unmatch.txt | awk -F: '{print $2}')
                    if [ -n "$UNMATCH" ]; then
                        grep "MN908947.3\s\+$UNMATCH" "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".vcf_disagreement.txt
                        grep -v "MN908947.3\s\+$UNMATCH" "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf.temp
                        mv -f "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf.temp "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf
                        artic_vcf_filter --medaka "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".merged.vcf "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".pass.vcf "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".fail.vcf
                        bgzip -f "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".pass.vcf
                        tabix -p vcf "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".pass.vcf.gz
                        artic_make_depth_mask --store-rg-depths $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".primertrimmed.rg.sorted.bam "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".coverage_mask.txt
                        artic_mask $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".coverage_mask.txt "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".fail.vcf "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".preconsensus.fasta
                        bcftools consensus -f "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".preconsensus.fasta "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".pass.vcf.gz -m "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".coverage_mask.txt -o "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".consensus.fasta
                        artic_fasta_header "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".consensus.fasta ""$SAMPLE_ID"/ARTIC/medaka"
                        cat "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".consensus.fasta $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".muscle.in.fasta
                        muscle -in "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".muscle.in.fasta -out "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID".muscle.out.fasta
                    fi
                    mv "$SAMPLE_ID"*.* "$SAMPLE_ID"
                    sed -i -e 's/>.*/>'${SAMPLE_ID}'/g' "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta
                    mafft --thread "$THREADS" --quiet --auto --keeplength --inputorder --6merpair --leavegappyregion --addfragments "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | seqkit grep -ip "$SAMPLE_ID" | sed '/>/!y/atcgn/ATCGN/' >> "$ANALYSIS_DIR"/"$LIBRARY_NAME".consensus."$REF_SEQ".$(uname -n).$(date +'%Y-%m-%d').fasta
                done
                micromamba deactivate
                for i in $(cat "$SAMPLE_SHEET"); do
                    micromamba activate vigeas_summary
                    SAMPLE_ID=$(echo "$i" | awk -F, '{print $1}')
                    PRIMER_SCHEME=$(echo "$i" | awk -F, '{print $3}')
                    PRIMER_SCHEME_DIR=$(echo "$PRIMER_SCHEME" | sed -e 's/ARTIC_V1/ARTIC\/V1/g' -e 's/ARTIC_V2/ARTIC\/V2/g' -e 's/ARTIC_V3/ARTIC\/V3/g' -e 's/ARTIC_V4/ARTIC\/V4/g' -e 's/ARTIC_V4_1/ARTIC\/V4.1/g' -e 's/ChikAsianECSA_V1/ChikAsianECSA\/V1/g' -e 's/DENV1_V1/DENV1\/V1/g' -e 's/DENV2_V1/DENV2\/V1/g' -e 's/DENV3_V1/DENV3\/V1/g' -e 's/DENV4_V1/DENV4\/V1/g' -e 's/FIOCRUZ-IOC_V1/FIOCRUZ-IOC\/V1/g' -e 's/FIOCRUZ-IOC_V2/FIOCRUZ-IOC\/V2/g' -e 's/LassaL_V1/LassaL\/V1/g' -e 's/LassaS_V1/LassaS\/V1/g' -e 's/MIDNIGHT_V1/MIDNIGHT\/V1/g' -e 's/MIDNIGHT_V2/MIDNIGHT\/V2/g' -e 's/MPXV_V1/MPXV\/V1/g' -e 's/Nipah_V1/Nipah\/V1/g' -e 's/OROV400L_V1/OROV400L\/V1/g' -e 's/OROV400M_V1/OROV400M\/V1/g' -e 's/OROV400S_V1/OROV400S\/V1/g' -e 's/WNV400_V1/WNV400\/V1/g' -e 's/YFV500_V1/YFV500\/V1/g' -e 's/YFV1000_V1/YFV1000\/V1/g' -e 's/ZaireEbola_V1/ZaireEbola\/V1/g' -e 's/ZikaAsian_V1/ZikaAsian\/V1/g')
                    REF_SEQ=$(echo "$PRIMER_SCHEME_DIR" | awk -F/ '{print $1}')
                    [[ ! -f "$ANALYSIS_DIR"/.summary.tmp ]] && echo "primer_scheme#sample_id#num_total_reads#num_mapp_reads#avg_depth#depth_20x#depth_100x#depth_1000x#ref_cov#ncount#ncount_perc" | tr '#' '\t' > "$ANALYSIS_DIR"/.summary.tmp
                    samtools depth -a "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam > "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".depth.tsv
                    echo -n "#" | tr '#' '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                    echo -n "$PRIMER_SCHEME""#" | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    echo -n "$SAMPLE_ID""#" | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    samtools view -c "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    samtools view -c "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam | awk '{printf $0"#"}' | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    AVG_DEPTH=$(samtools depth "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam | awk '{sum+=$3} END {print sum/NR}')
                    if [[ "$AVG_DEPTH" == "" || "$AVG_DEPTH" == 0 ]]; then
                        echo "0.00""#" | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                    else
                        echo "$AVG_DEPTH" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                    fi
                    paste <(samtools depth "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"20"') {print $0}}' | wc -l) <(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $0"#"}' | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    paste <(samtools depth "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"100"') {print $0}}' | wc -l) <(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $0"#"}' | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    paste <(samtools depth "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".primertrimmed.rg.sorted.bam | awk '{if ($3 > '"1000"') {print $0}}' | wc -l) <(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk '{print $1}') | awk -F"\t" '{printf("%0.2f\n", $1/$2*100)}' | awk '{printf $0"#"}' | tr '#' '\t' >> "$ANALYSIS_DIR"/.summary.tmp
                    N_COUNT=$(seqtk comp "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta | awk -F"\t" '{print $9}')
                    N_COUNT_PER=$(paste <(seqtk comp "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta | awk -F"\t" '{print $9}') <(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk '{print $1}')| awk -F"\t" '{printf("%0.2f\n", ($1/$2)*100)}')
                    REF_SEQ_LENGHT=$(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk -F" " '{print $1}')
                    REF_SEQ_COV=$(paste <(fastalength $HOME/vigeas/primer_schemes/"$PRIMER_SCHEME_DIR"/"$REF_SEQ".reference.fasta | awk '{print $1}') <(seqtk comp "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta | awk -F"\t" '{print $9}') | awk -F"\t" '{printf("%0.2f\n", ($1-$2)/$1*100)}')
                    if [[ ! -f "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".consensus.fasta ]]; then
                        echo "0.00" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                        echo "$REF_SEQ_LENGHT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                        echo "100.00" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                    else
                        if [[ "$N_COUNT" == 0 ]]; then
                            echo "0.00" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                            echo "$REF_SEQ_LENGHT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                            echo "100.00" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                        else
                            echo "$REF_SEQ_COV" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                            echo "$N_COUNT" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                            echo "$N_COUNT_PER" | awk '{printf $0"#"}' | tr '#' '\t' | tr -d '\n' >> "$ANALYSIS_DIR"/.summary.tmp
                        fi
                    fi
                    Rscript $HOME/vigeas/scripts/vigeas-nanopore-depth-coverage.R "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID".depth.tsv "$ANALYSIS_DIR"/"$LIBRARY_NAME".contamination."$REF_SEQ".analysis.$(uname -n).$(date +'%Y-%m-%d').bed "$SAMPLE_ID" "$REF_SEQ" "$ANALYSIS_DIR"/ASSEMBLY/"$SAMPLE_ID"/"$SAMPLE_ID"
                    sed '/^[[:space:]]*$/d' "$ANALYSIS_DIR"/.summary.tmp > "$ANALYSIS_DIR"/"$LIBRARY_NAME".summary.$(uname -n).$(date +'%Y-%m-%d').txt
                    fi
                    micromamba deactivate
                done
                micromamba activate vigeas_summary
                for i in $(cat "$SAMPLE_SHEET"); do
                    PRIMER_SCHEME=$(echo "$i" | awk -F, '{print $3}' | sed -e 's/ARTIC_V1/ARTIC\/V1/g' -e 's/ARTIC_V2/ARTIC\/V2/g' -e 's/ARTIC_V3/ARTIC\/V3/g' -e 's/ARTIC_V4/ARTIC\/V4/g' -e 's/ARTIC_V4_1/ARTIC\/V4.1/g' -e 's/ChikAsianECSA_V1/ChikAsianECSA\/V1/g' -e 's/DENV1_V1/DENV1\/V1/g' -e 's/DENV2_V1/DENV2\/V1/g' -e 's/DENV3_V1/DENV3\/V1/g' -e 's/DENV4_V1/DENV4\/V1/g' -e 's/FIOCRUZ-IOC_V1/FIOCRUZ-IOC\/V1/g' -e 's/FIOCRUZ-IOC_V2/FIOCRUZ-IOC\/V2/g' -e 's/LassaL_V1/LassaL\/V1/g' -e 's/LassaS_V1/LassaS\/V1/g' -e 's/MIDNIGHT_V1/MIDNIGHT\/V1/g' -e 's/MIDNIGHT_V2/MIDNIGHT\/V2/g' -e 's/MPXV_V1/MPXV\/V1/g' -e 's/Nipah_V1/Nipah\/V1/g' -e 's/OROV400L_V1/OROV400L\/V1/g' -e 's/OROV400M_V1/OROV400M\/V1/g' -e 's/OROV400S_V1/OROV400S\/V1/g' -e 's/WNV400_V1/WNV400\/V1/g' -e 's/YFV500_V1/YFV500\/V1/g' -e 's/YFV1000_V1/YFV1000\/V1/g' -e 's/ZaireEbola_V1/ZaireEbola\/V1/g' -e 's/ZikaAsian_V1/ZikaAsian\/V1/g' | awk -F/ '{print $1}')
                    if [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "ARTIC|MIDNIGHT|FIOCRUZ-IOC") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".sars2-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.sars2-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".sars2-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.sars2-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "ZikaAsian") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".zikv-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.zikv-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".zikv-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.zikv-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "DENGUESEQ1|DENV1") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv1-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv1-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv1-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv1-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "DENGUESEQ2|DENV2") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv2-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv2-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv2-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv2-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "DENGUESEQ3|DENV3") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv3-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv3-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv3-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv3-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "DENGUESEQ4|DENV4") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv4-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv4-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".denv4-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.denv4-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "ChikAsianECSA") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".chikv-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.chikv-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".chikv-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.chikv-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "HTLV1") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".htlv1-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.htlv1-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".htlv1-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.htlv1-coverage.contamination.pdf
                    elif [[ ! -z $(echo "$PRIMER_SCHEME" | egrep "WNV400") ]]; then
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".wnv-coverage.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.wnv-coverage.pdf
                        gs -dSAFER -r3000 -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOUTPUTFILE="$ANALYSIS_DIR"/"$LIBRARY_NAME".wnv-coverage.contamination.$(uname -n).$(date +'%Y-%m-%d').pdf "$ANALYSIS_DIR"/ASSEMBLY/*/*.wnv-coverage.contamination.pdf
                    fi
                done
                micromamba deactivate
            fi
        else
            usage
        fi
    else
        usage
    fi
    rm -rf "$ANALYSIS_DIR"/*.tmp "$ANALYSIS_DIR"/ASSEMBLY/BC*fastq
    end=$(date +%s.%N)
    runtime=$(python -c "print(${end} - ${start})")
    echo "" && echo "Done. The runtime was "$runtime" seconds." && echo ""
}

bg &>>"$ANALYSIS_DIR"/"$LIBRARY_NAME".log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
