#!/bin/bash

usage () {
    echo "
vigeasIL
--------
Viral genome assembly pipeline for WGS using Illumina platforms

List available primer scheme in this workflow:
    $(basename $0) -l

Assembly + summary stats:
    $(basename $0) -w 1 -i <input path> -s <sample sheet> -d <depth> -t <threads>

Assembly:
    $(basename $0) -w 2 -i <input path> -s <sample sheet> -d <depth> -t <threads>

Summary stats:
    $(basename $0) -w 3 -i <input path> -s <sample sheet> -t <threads>

Command line parameters:
    -d arg    Minimum depth to variant calling (default: 10).
    -h        Print this help and exit.
    -i arg    Path containing the Illumina fastQ sequencing data.
    -s arg    Illumina samplesheet containing the primer scheme in the description column (i.e. ARTIC_V4-1 for SARS-CoV-2).
    -t arg    Max number of threads (default: all cores minus 2).
    -u        Update conda dependencies.
    -v        Display version information and check for update.
    -w arg    Set the workflow option (1- assembly+summary; 2- assembly; 3- summary)."
exit -1
}

primer_scheme_list () {
    echo "
AVAILABLE PRIMER SCHEMES --> updated: 17 Jul 2022
------------------------------------------------------------------------------------------------
target                       primer_scheme       url_reference
------------------------------------------------------------------------------------------------
CHIKV Asian/ECSA [~400pb]    ChikAsianECSA_V1    https://github.com/zibraproject/zika-pipeline
DENV-1 [~900pb]              DENV1_V1            https://doi.org/10.1038/s41467-021-22607-0
DENV-2 [~900pb]              DENV2_V1            https://doi.org/10.1038/s41467-021-22607-0
DENV-3 [~900pb]              DENV3_V1            https://doi.org/10.1038/s41467-021-22607-0
DENV-4 [~700pb]              DENV4_V1            https://doi.org/10.1038/s41467-021-22607-0
EV [~1000pb]                 ZaireEbola_V1       https://github.com/artic-network/artic-ncov2019
EV [~500pb]                  ZaireEbola_V2       https://github.com/artic-network/artic-ncov2019
EV [~400pb]                  ZaireEbola_V3       https://github.com/artic-network/artic-ncov2019
LASV L-segment [~400pb]      LassaL_V1           https://github.com/zibraproject/zika-pipeline
LASV S-segment [~400pb]      LassaS_V1           https://github.com/zibraproject/zika-pipeline
NiV  [~400pb]                Nipah_V1            https://github.com/artic-network/artic-ncov2019
OROV L-segment [~400pb]      OROV400L            https://github.com/zibraproject/zika-pipeline
OROV M-segment [~400pb]      OROV400M            https://github.com/zibraproject/zika-pipeline
OROV S-segment [~400pb]      OROV400S            https://github.com/zibraproject/zika-pipeline
SARS-CoV-2 [~400pb]          ARTIC_V1            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb]          ARTIC_V2            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb]          ARTIC_V3            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb]          ARTIC_V4            https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~400pb]          ARTIC_V4_1          https://github.com/artic-network/artic-ncov2019
SARS-CoV-2 [~1200pb]         MIDNIGHT_V1         https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2 [~1200pb]         MIDNIGHT_V2         https://doi.org/10.1093/biomethods/bpaa014
SARS-CoV-2 [~2000pb]         FIOCRUZ-IOC_V1      https://doi.org/10.1101/2020.04.30.069039
SARS-CoV-2 [~2000pb]         FIOCRUZ-IOC_V2      https://doi.org/10.1101/2020.04.30.069039
YFV [~500pb]                 YFV500              https://github.com/zibraproject/zika-pipeline
YFV [~1000pb]                YFV1000             https://github.com/zibraproject/zika-pipeline
ZIKV Asian [~300pb]          ZikaAsian_V1        https://github.com/zibraproject/zika-pipeline
------------------------------------------------------------------------------------------------"
exit -1
}

update () {
    mamba update -y -n base -c conda-forge -c anaconda -c bioconda -c defaults conda
    mamba update -y -n vir_assembly -c conda-forge -c anaconda -c bioconda -c defaults --all
    mamba update -y -n vir_summary -c conda-forge -c anaconda -c bioconda -c defaults --all
    source activate vir_summary
    pangolin --update
exit -1
}

version () {
    echo "
VIRUS_ASSEMBLY --> updated: 17 Jul 2022
. made by Laise de Moraes [https://lpmor22.github.io/] --> Khouri Lab, GonÃ§alo Moniz Institute, FIOCRUZ, Brazil"
exit -1
}

while getopts "d:hi:ls:t:uvw:" OPT; do
    case "$OPT" in
        d) DEPTH="$OPTARG";;
        h) usage;;
        i) INPUT="$OPTARG";;
        l) primer_scheme_list;;
        s) SAMPLE_SHEET="$OPTARG";;
        t) THREADS="$OPTARG";;
        u) update;;
        v) version;;
        w) WORKFLOW="$OPTARG";;
    esac
done

if [[ -z "$DEPTH" ]]; then DEPTH=10; fi

if [[ ! -z "$WORKFLOW" ]]; then
    if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]]; then
        usage
    else
        LIBRARY_NAME="$(basename "$INPUT")"
        ANALYSIS_DIR=$HOME/VIRUS_ASSEMBLY/"$LIBRARY_NAME"_depth"$DEPTH"X_ANALYSIS
        [[ ! -d "$ANALYSIS_DIR" ]] && mkdir "$ANALYSIS_DIR" && chmod 700 -R "$ANALYSIS_DIR"
        echo "" && echo "Output path: "$ANALYSIS_DIR""
        echo "" && echo "Log Analysis: "$ANALYSIS_DIR"/"$LIBRARY_NAME".depth"$DEPTH"X.log.$(uname -n).$(date +'%Y-%m-%d').txt"
        echo "" && echo "To display the log output in fulscreen: watch tail -n 20 "$ANALYSIS_DIR"/"$LIBRARY_NAME".depth"$DEPTH"X.log.$(uname -n).$(date +'%Y-%m-%d').txt"
    fi
else
    usage
fi

bg() {
    start_all=$(date +%s.%N)
    if [[ -z "$THREADS" ]]; then THREADS=$(lscpu | grep 'CPU(s):' | awk '{print $2}' | sed -n '1p' | awk '{print $1-2}'); fi
    if [[ ! -z "$WORKFLOW" ]]; then
        if [[ "$WORKFLOW" == "1" ]]; then
            if [[ -z "$INPUT" ]] || [[ -z "$SAMPLE_SHEET" ]]; then
                usage
            else
                for i in $(find "$INPUT" -type f -name "*_R1_*"); do cp "$i" "$ANALYSIS_DIR"/$(echo "$i" | awk -F/ '{print $NF}' | awk -F"-|_" '{print $1}').R1.fastq.gz -v; done
                for i in $(find "$INPUT" -type f -name "*_R2_*"); do cp "$i" "$ANALYSIS_DIR"/$(echo "$i" | awk -F/ '{print $NF}' | awk -F"-|_" '{print $1}').R2.fastq.gz -v; done
                source activate vir_assembly
                for i in $(cat "$SAMPLE_SHEET" | sed -e '1,18d' | awk -F, '{print $NF}' | sed -e 's/ARTIC.*/MN908947.3/g' -e 's/FIOCRUZ-IOC.*/MN908947.3/g' -e 's/MIDNIGHT.*/MN908947.3/g' | sort -u); do bwa index $HOME/VIRUS_ASSEMBLY/ref_seq/"$i".fasta; done
                for j in $(cat "$SAMPLE_SHEET" | sed -e '1,18d' | awk -F, '{print $1","$NF}' | sort); do
                    SAMPLE_ID=$(echo "$j" | tr -dc '[:print:]\n' | awk -F, '{print $1}')
                    PRIMER_SCHEME=$(echo "$j" | tr -dc '[:print:]\n' | awk -F, '{print $2}')
                    REF_SEQ=$(echo "$PRIMER_SCHEME" | sed -e 's/ARTIC.*/MN908947.3/g' -e 's/FIOCRUZ-IOC.*/MN908947.3/g' -e 's/MIDNIGHT.*/MN908947.3/g' | sort -u)
                    mkdir "$ANALYSIS_DIR"/"$SAMPLE_ID".results/
                    echo "fastp analysis:" > "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".time.txt
                    start=$(date +%s%3N)
                    fastp -i "$ANALYSIS_DIR"/"$SAMPLE_ID".R1.fastq.gz -I "$ANALYSIS_DIR"/"$SAMPLE_ID".R2.fastq.gz -o "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".R1.fq.gz -O "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".R2.fq.gz --cut_front --cut_tail --qualified_quality_phred 20 -l 75 -h "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".fastp.html -j "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".fastp.json --thread "$THREADS" --adapter_fasta $HOME/VIRUS_ASSEMBLY/primer_fasta/"$PRIMER_SCHEME".fasta -f 0 -t 0 -F 0 -T 0
                    end=$(date +%s%3N)
                    analysis_in_miliseconds=$(expr $end - $start)
                    analysis_in_minutes=$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))
                    echo $analysis_in_minutes >> "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".time.txt
                    echo "BWA and iVar analysis:" >> "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".time.txt
                    start=$(date +%s%3N)
                    bwa mem -t "$THREADS" $HOME/VIRUS_ASSEMBLY/ref_seq/"$REF_SEQ".fasta "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".R1.fq.gz "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".R2.fq.gz -o "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".bam
                    samtools sort -o "$SAMPLE_ID".sorted.bam "$SAMPLE_ID".bam
                    samtools index "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".sorted.bam
                    samtools mpileup -d 50000 --reference $HOME/VIRUS_ASSEMBLY/ref_seq/"$REF_SEQ".fasta -a -B "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".sorted.bam | ivar variants -p "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID" -q 30 -t 0.05
                    samtools mpileup -d 50000 --reference $HOME/VIRUS_ASSEMBLY/ref_seq/"$REF_SEQ".fasta -a -B "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".sorted.bam | ivar consensus -p "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID" -q 30 -t 0 -m "$DEPTH" -n N
                    end=$(date +%s%3N)
                    analysis_in_miliseconds=$(expr $end - $start)
                    analysis_in_minutes=$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))
                    echo $analysis_in_minutes >> "$ANALYSIS_DIR"/"$SAMPLE_ID".results/"$SAMPLE_ID".time.txt
                    mv "$SAMPLE_ID".fa "$SAMPLE_ID".depth"$DEPTH".fa
                    sed -i -e 's/>.*/>"$SAMPLE_ID"/g' -e 's/__/\//g' -e 's/--/|/g' "$SAMPLE_ID".depth"$DEPTH".fa
                done
            fi
        else
            usage
        fi
    else
        usage
    fi

    # rm -rf "$ANALYSIS_DIR"/*.fastq.gz "$ANALYSIS_DIR"/*.tmp $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.amb $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.ann $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.bwt $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.fai $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.pac $HOME/VIRUS_ASSEMBLY/ref_seq/*.fasta.sa

    end_all=$(date +%s.%N)

    runtime_all=$(python -c "print(${end_all} - ${start_all})")

    echo "" && echo "Done. The runtime was "$runtime_all" seconds." && echo ""

}

bg &>>"$ANALYSIS_DIR"/"$LIBRARY_NAME".depth"$DEPTH"X.log.$(uname -n).$(date +'%Y-%m-%d').txt &

exit 0
